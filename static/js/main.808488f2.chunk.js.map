{"version":3,"sources":["components/cards/Cards.module.css","api/index.js","components/cards/Cards.jsx","components/chart/Chart.jsx","components/countrypicker/Countrypicker.jsx","App.js","index.js","App.module.css","components/chart/Chart.module.css","components/countrypicker/Countrypicker.module.css","images/image.png"],"names":["module","exports","url","fetchdata","country","a","changeableurl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modified_data","map","dailydata","total","date","reportDate","fetchCountries","countries","name","console","log","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","Chart","useState","setdailydata","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Countrypicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchApi","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","fetcheddata","this","src","image","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.808488f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2WEWm\",\"card\":\"Cards_card__BDF2p\",\"infected\":\"Cards_infected__Iv_8k\",\"recovered\":\"Cards_recovered__SNRwN\",\"deaths\":\"Cards_deaths__3H7Oc\"};","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchdata = async (country) => {\r\n\r\n    let changeableurl = url;\r\n\r\n    if(country){\r\n        changeableurl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try{\r\n        const { data :{confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableurl);\r\n\r\n        return {confirmed,recovered,deaths,lastUpdate};\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        \r\n        const modified_data = data.map((dailydata)=>({\r\n            confirmed:dailydata.confirmed.total,\r\n            deaths:dailydata.deaths.total,\r\n            date:dailydata.reportDate,\r\n        }));\r\n        return modified_data;\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n\r\n    try{\r\n\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n\r\n\r\n        return countries.map((country)=>country.name)\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport {Card,CardContent,Typography,Grid} from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from  \"classnames\";\r\n\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return \"loading...\"\r\n    }\r\n    else{\r\n        // console.log(confirmed)\r\n        // console.log(recovered)\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n        <Grid container spacing={8}  justify=\"space-between\">\r\n\r\n            <Grid item component={Card}  xs={12} md={5}  className={cx(styles.card,styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant=\"h5\">  <CountUp start={0}end={confirmed.value}duration={2.5}seperator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">number of active cases from covid</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n            {/* <Grid item component={Card}  xs={12} md={3}  className={cx(styles.card,styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={recovered.value} duration={2.5} seperator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">number of recovered cases from covid</Typography>\r\n                </CardContent>\r\n\r\n            </Grid> */}\r\n\r\n            <Grid item component={Card}  xs={12} md={5  }  className={cx(styles.card,styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={deaths.value}  duration={2.5} seperator=\",\" />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">number of deaths caused by covid</Typography>\r\n                </CardContent>\r\n\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import React,{useEffect,useState} from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport {Line,Bar} from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({data : { confirmed,deaths,recovered },country}) => {\r\n    const [dailydata,setdailydata] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async() => {\r\n            setdailydata(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI();\r\n\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailydata.length ? (\r\n            <Line\r\n            data={{\r\n                labels:dailydata.map(({ date })=>(date)),\r\n                datasets:[{\r\n                    data:dailydata.map(({confirmed})=>(confirmed)),\r\n                    label:\"Infected\",\r\n                    borderColor:\"#3333ff\",\r\n                    fill:true,\r\n                },\r\n                {\r\n                    data:dailydata.map(({deaths})=>(deaths)),\r\n                    label:\"Deaths\",\r\n                    borderColor:\"red\",\r\n                    backgroundColor:\"rgba(255,0,0,0.5)\",\r\n                    fill:true,\r\n                }\r\n            ],\r\n            }}\r\n            />) : null\r\n            \r\n    );\r\n\r\n\r\n    const barChart = (\r\n        confirmed ? \r\n        (<Bar\r\n        data={{\r\n            labels:[\"Infected\",\"Recovered\",\"Deaths\"],\r\n            datasets:[{\r\n                label:'people',\r\n                backgroundColor:[\r\n                    'rgba(0,0,225,0.8)',\r\n                    'rgba(0,225,0,0.8)',\r\n                    'rgba(255,0,0,0.8)',\r\n                ],\r\n                data:[confirmed.value,recovered.value,deaths.value],\r\n            }]\r\n\r\n        }}\r\n        options={{\r\n            legend:{display:false},\r\n            title:{display:true,text:`Current state in ${country} `},\r\n        }}\r\n\r\n        \r\n        />):null\r\n    );\r\n    return(\r\n        <div className={styles.container}>\r\n\r\n            {country ? barChart: lineChart}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React,{useState,useEffect} from \"react\";\r\nimport {NativeSelect , FormControl } from \"@material-ui/core\";\r\n\r\nimport styles from \"./Countrypicker.module.css\";\r\nimport {fetchCountries} from \"../../api\";\r\n\r\n\r\n const Countrypicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries , setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchApi = async() => {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n\r\n        fetchApi();\r\n    },[])\r\n\r\n    console.log(fetchedCountries)\r\n\r\n    \r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={ (e)=>(handleCountryChange(e.target.value)) }>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default Countrypicker;","import React from \"react\";\r\nimport {fetchdata} from \"./api\";\r\nimport {Cards,Chart,Countrypicker} from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport image from \"./images/image.png\";\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        data:{},\r\n        country:\"\",\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetcheddata = await fetchdata();\r\n        this.setState({data:fetcheddata})\r\n    }\r\n\r\n    handleCountryChange = async(country)=>{\r\n        //console.log(country)\r\n        const fetchedData = await fetchdata(country);\r\n\r\n        this.setState({data:fetchedData,country:country})\r\n    }\r\n\r\n    render(){\r\n        const {data,country} = this.state;\r\n        return(\r\n\r\n            <div className={styles.container} >\r\n            <img src={image} className={styles.image}/>\r\n            <Cards data={data}/>\r\n            <Countrypicker handleCountryChange= {this.handleCountryChange}/>\r\n            <Chart data={data} country={country}/>  \r\n            </div>\r\n\r\n        );\r\n       \r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDom.render(<App/>,document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__CSR7Z\",\"image\":\"App_image__2z20P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1pa7-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Countrypicker_formControl__3gn4C\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}
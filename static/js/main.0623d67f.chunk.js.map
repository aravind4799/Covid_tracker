{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Card/Card.jsx","components/Cards/Cards.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Card/Card.module.css","images/image.png"],"names":["module","exports","url","fetchData","async","changeableUrl","country","concat","data","axios","get","extract_data","confirmed","deaths","recovered","last_update","error","Chart","dailyData","setDailyData","useState","useEffect","initialDailyData","console","log","fetchMyAPI","barChart","React","createElement","Bar","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","Line","map","date","Date","toLocaleDateString","borderColor","fill","className","styles","container","Countries","handleCountryChange","countries","setCountries","fetchCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","value","disabled","i","key","iso","name","CardComponent","cardTitle","lastUpdate","cardSubtitle","Grid","item","xs","md","component","Card","cx","card","CardContent","Typography","color","gutterBottom","variant","CountUp","start","end","duration","separator","Info","spacing","justify","infected","App","Component","constructor","args","state","this","setState","render","image","src","alt","Cards","CountryPicker","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0623d67f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3cFA4\",\"infected\":\"Cards_infected__3c3-U\",\"recovered\":\"Cards_recovered__2cTKp\",\"deaths\":\"Cards_deaths__1uomi\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid-api.com/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/reports/total?iso=${country}`;\r\n  }\r\n  else{\r\n    changeableUrl = `${url}/reports/total`;\r\n  }\r\n  try {\r\n    const {data} = await axios.get(changeableUrl)\r\n    const extract_data = data.data\r\n    let confirmed = extract_data.confirmed\r\n    let deaths = extract_data.deaths\r\n    let recovered = confirmed - deaths\r\n    let last_update = extract_data.last_update\r\n    return { confirmed, recovered, deaths, last_update };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get(`${url}/reports/total`);\r\n\r\n      console.log(data);\r\n  \r\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/regions`);\r\n    return data.data\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed,recovered,deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchData();\r\n      console.log(initialDailyData);\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected','Recovered','Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)','rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed,recovered,deaths],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          }\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  // {\r\n  //   data: dailyData.map((data) => data.confirmed),\r\n  //   label: 'Infected',\r\n  //   borderColor: '#3333ff',\r\n  //   fill: true,\r\n  // }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"Select Country\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n      <option value=\"Select Country\" disabled >Select Country</option>\r\n        {countries.map((country, i) => <option key={i} value={country.iso}>{country.name}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Card.module.css';\r\n\r\nconst CardComponent = ({ className, cardTitle, value, lastUpdate, cardSubtitle }) => (\r\n  <Grid item xs={12} md={3} component={Card} className={cx(styles.card, className)}>\r\n    <CardContent>\r\n      <Typography color=\"textSecondary\" gutterBottom>\r\n        {cardTitle}\r\n      </Typography>\r\n      <Typography variant=\"h5\" component=\"h2\">\r\n        <CountUp start={0} end={value} duration={2.75} separator=\",\" />\r\n      </Typography>\r\n      <Typography color=\"textSecondary\">\r\n        {/* {new Date(lastUpdate).toDateString()} */}\r\n        {lastUpdate}\r\n      </Typography>\r\n      <Typography variant=\"body2\" component=\"p\">\r\n        {cardSubtitle}\r\n      </Typography>\r\n    </CardContent>\r\n  </Grid>\r\n);\r\n\r\nexport default CardComponent;\r\n","import React from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport CardComponent from './Card/Card';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n        {/* <Typography gutterBottom variant=\"h4\" component=\"h2\">Global</Typography> */}\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <CardComponent\r\n          className={styles.infected}\r\n          cardTitle=\"Infected\"\r\n          value={confirmed}\r\n          lastUpdate={lastUpdate}\r\n          cardSubtitle=\"Number of active cases from COVID-19.\"\r\n        />\r\n        <CardComponent\r\n          className={styles.recovered}\r\n          cardTitle=\"Recovered\"\r\n          value={confirmed - deaths}\r\n          lastUpdate={lastUpdate}\r\n          cardSubtitle=\"Number of recoveries from COVID-19.\"\r\n        />\r\n        <CardComponent\r\n          className={styles.deaths}\r\n          cardTitle=\"Deaths\"\r\n          value={deaths}\r\n          lastUpdate={lastUpdate}\r\n          cardSubtitle=\"Number of deaths caused by COVID-19.\"\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React from 'react';\r\n\r\nimport { Cards, CountryPicker, Chart } from './components';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport { fetchData } from './api/';\r\nimport styles from './App.module.css';\r\n\r\nimport image from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await fetchData();\r\n\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const data = await fetchData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n\r\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} /> \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2qzhx\",\"image\":\"App_image__3n7He\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2Rtyc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3t5Xf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__11c9Z\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}